name: yamdb_fila workflow

on: [push]

jobs:
  test_flake8_and_pytest:
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repository
        uses: actions/checkout@v2  # предустановленный action для клонирования репозитория
      - name: Set up Python
        uses: actions/setup-python@v2  # предустановленный action для установки Python-окружения
        with:
          python-version: 3.7
      - name: Install dependencies
        run: | 
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          cd api_yamdb
          pip install -r requirements.txt
      - name: Test with flake8 and pytest
        run: |
          python -m flake8
          pytest
  build_image_and_push_new_image_to_docker_hub:
    runs-on: ubuntu-latest
    needs: test_flake8_and_pytest
    steps:
      - name: Clone the repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push image to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: yoxyyyy/yamdb_final:latest
          file: api_yamdb/Dockerfile
  deploy:
    runs-on: ubuntu-latest
    needs: build_image_and_push_new_image_to_docker_hub
    if: github.ref == 'refs/heads/master'
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker-compose stop
            sudo docker-compose rm web
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker-compose up -d
            sudo docker-compose exec -T backend python manage.py migrate
            sudo docker-compose exec -T backend python manage.py collectstatic --noinput
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
